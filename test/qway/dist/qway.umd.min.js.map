{"version":3,"file":"qway.umd.min.js","sources":["../src/qway.js"],"sourcesContent":["/**\r\n * Qway.js 3.0.0\r\n *\r\n * Copyright 2018, yousef neji\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * @tutorial introduction\r\n * there is so many types of shortcut we offer:\r\n *  - `shortcut` : ordinary known one\r\n *  - `combo` : used mostly in games like cheat code a string you must tap very quickly and once\r\n * you fully tap a function that going to execute at the end resulting in a completed mission\r\n * or something like that\r\n *  - `holdAction` : occurs when you hold a key for a duration resulting in a function that execute\r\n * at the end.\r\n *\r\n * the syntax to bind each type deffers like so:\r\n *  to bind a normal shortcut you must pass a string constraint a keys list seperated by a `+` sign\r\n *  to bind a combo you must pass a string of keys list seperated by `,` comma\r\n *  to bind a holdAction you pass a string in this form ` (key) => (duration) `. the spaces added only for clarity also the parenthese\r\n *  the syntax of a hold action constrained out of a key then `=>` then the duration of holding in milliseconds.\r\n *\r\n *\r\n * Should not that not all shortcut will be allowed some shortcut could be used by default in the used browser\r\n * all thought the system will try to block this default one but some of them may still work like ctrl+t which open\r\n * new tab and other ones.\r\n *\r\n *\r\n * Tricks:\r\n * here is a simple trick, what to do if I just want to stop a default keybinding like (ctrl+r) that does\r\n * the window reload, you can simply assing to this shortcut a enmpty callback like that `qway.bind('ctrl+r')` you don't really\r\n * have to pass a callback as a qway empty optimal generated callback will be there for you.\r\n */\r\n\r\n// fixed bug in version 2.0.0\r\n// the library stop all my other callbacks to ceratin event such as mousedown event\r\n// mouse up event\r\n// and window blur event\r\n\r\n// for major support those steps must be implimented\r\nif ([].findIndex === undefined) {\r\n  Array.prototype[\"findIndex\"] = function (callback) {\r\n    var res = -1;\r\n    for (let i = 0; i < this.length; i++) {\r\n      const element = this[i];\r\n      out = callback(element, i, this);\r\n      if (out === true) {\r\n        res = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface allows to handle setting up shortcut and combo keys for you app game or even\r\n * website very easily.\r\n * @author Yousef Neji\r\n * @param {boolean} duplicates default false, whether more then one callback for the same\r\n * shortcut allowed or not!\r\n */\r\nfunction Qway(duplicates = false) {\r\n  var _this = this;\r\n\r\n  /**\r\n   * Holds the defined shortcuts list, to add new shortcut use `bind`.\r\n   * @type {Array}\r\n   */\r\n  this.shortcutslist = [];\r\n\r\n  /**\r\n   * Holds the defined combo list, to new combo use `bind`.\r\n   * @type {Array}\r\n   */\r\n  this.combo = [];\r\n\r\n  /**\r\n   * Holds the callback to be executing when pressing certain key for a given duration\r\n   * @type {Array}\r\n   */\r\n  this.holdingActions = [];\r\n\r\n  /**\r\n   * Flag determine whether assinging more then one callback to the same shortcut\r\n   * is allowed or not\r\n   * @type {boolean}\r\n   */\r\n  this.duplicates = duplicates;\r\n\r\n  /**\r\n   * Holds the different allowed keys to form the sortcut\r\n   * @type {Array}\r\n   */\r\n  this.KEYS = [\r\n    \"command\" /*For Mac OS*/,\r\n    \"ctrl\",\r\n    \"shift\",\r\n    \"alt\",\r\n    \"altGraph\",\r\n    \"capslock\",\r\n    \"tab\",\r\n    \"backspace\",\r\n    \"enter\",\r\n    \"meta\",\r\n    \"space\",\r\n    \"escape\",\r\n    \"pageup\",\r\n    \"pagedown\",\r\n    \"home\",\r\n    \"insert\",\r\n    \"delete\",\r\n    \"end\",\r\n    \"arrowup\",\r\n    \"arrowdown\",\r\n    \"arrowleft\",\r\n    \"arrowright\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"0\",\r\n    \"a\",\r\n    \"b\",\r\n    \"c\",\r\n    \"d\",\r\n    \"e\",\r\n    \"f\",\r\n    \"g\",\r\n    \"h\",\r\n    \"i\",\r\n    \"j\",\r\n    \"k\",\r\n    \"l\",\r\n    \"m\",\r\n    \"n\",\r\n    \"o\",\r\n    \"p\",\r\n    \"q\",\r\n    \"r\",\r\n    \"s\",\r\n    \"t\",\r\n    \"u\",\r\n    \"v\",\r\n    \"w\",\r\n    \"x\",\r\n    \"y\",\r\n    \"z\",\r\n    \"*\",\r\n    \"f1\",\r\n    \"f2\",\r\n    \"f3\",\r\n    \"f4\",\r\n    \"f5\",\r\n    \"f6\",\r\n    \"f7\",\r\n    \"f8\",\r\n    \"f9\",\r\n    \"f10\",\r\n    \"f11\",\r\n  ];\r\n\r\n  /**\r\n   * Get or set shortcut activation state\r\n   * @type {boolean}\r\n   */\r\n  this.shortcutActivated = true;\r\n\r\n  /**\r\n   * Get or set combo activation state\r\n   * @type {boolean}\r\n   */\r\n  this.comboActivated = true;\r\n\r\n  /**\r\n   * Flag determine whether the user currently in interactive mode or not,\r\n   * must not get changed!\r\n   * @readonly\r\n   * @type {boolean}\r\n   */\r\n  this.intercativeMode = false;\r\n\r\n  /**\r\n   * Used in the interactive mode to hold the shortcut that going to be builded\r\n   * @type {Array<Array>}\r\n   */\r\n  this.toBuild = [[], []];\r\n\r\n  /**\r\n   * QEF or Qway Escape Function is the rescue function when ever a shortcut was created without it callback.\r\n   * @readonly\r\n   * @type {function}\r\n   */\r\n  this.QEF = function () {};\r\n\r\n  /**\r\n   * Holds the keys states whether they are pressed or not.\r\n   * @readonly\r\n   */\r\n  this.keysuite = {};\r\n\r\n  // packing up\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    _this.handleKeydown.call(_this, e);\r\n  });\r\n  window.addEventListener(\"keyup\", function (e) {\r\n    _this.handleKeyup.call(_this, e);\r\n  });\r\n  window.addEventListener(\"blur\", function () {\r\n    _this.blur.call(_this);\r\n  });\r\n}\r\n\r\nQway.prototype = {\r\n  /**\r\n   * Approve binding the user created shortcut in interactive mode.\r\n   * @method Qway#applyReplace\r\n   * @returns {string} the shortcut that currently was approved.\r\n   */\r\n  approve: function () {\r\n    if (this.toBuild[0].length === 0) return;\r\n\r\n    var shortcut = this.toBuild[0].join(\"+\");\r\n    var callback = this.toBuild[1][1];\r\n\r\n    this.bind(shortcut, callback);\r\n\r\n    this.toBuild = [[], []];\r\n    return shortcut;\r\n  },\r\n  /**\r\n   * Approve replacing the given `callback` shortcut by the user defined one.\r\n   * @method Qway#approveToReplace\r\n   * @returns {boolean} true if replacing went well or false otherwise.\r\n   */\r\n  approveToReplace: function () {\r\n    if (this.toBuild[0].length === 0) return;\r\n\r\n    var shortcut = this.toBuild[0];\r\n    var callback = this.toBuild[1][1];\r\n\r\n    var obj = this.shortcutslist.find(\r\n      (a) => a.callback.toString() === callback.toString()\r\n    );\r\n    let exist = this.check(shortcut.join(\"+\")) !== -1;\r\n\r\n    if (obj !== undefined && !exist) {\r\n      this.unbind(obj.shortcut.join(\"+\"), obj.callback);\r\n      var res = this.bind(shortcut.join(\"+\"), this.toBuild[1][1]);\r\n\r\n      this.toBuild = [[], []];\r\n      this.intercativeMode = false;\r\n      return res === false ? res : shortcut;\r\n    }\r\n    this.toBuild = [[], []];\r\n    this.intercativeMode = false;\r\n    return false;\r\n  },\r\n  /**\r\n   * Abort the interactive process emptying the system from the temporary saved\r\n   * user interaction data(shortcut), invoked internally by the system.\r\n   * @method Qway#abort\r\n   */\r\n  abort: function () {\r\n    this.intercativeMode = false;\r\n    this.toBuild = [[], []];\r\n  },\r\n  /**\r\n   * Reset the progress of the combo with the given string and callback.\r\n   * @method Qway#resetCombo\r\n   * @param {string} combo\r\n   * @param {function} callback (optional)\r\n   */\r\n  resetCombo: function (combo, callback) {\r\n    combo = this.supervise(combo).join(\",\");\r\n\r\n    var index = this.combo.findIndex(\r\n      (a) =>\r\n        a.combo.join(\",\") === combo &&\r\n        (callback === undefined ||\r\n          (callback !== undefined &&\r\n            a.callback.toString() === callback.toString()))\r\n    );\r\n\r\n    if (index !== -1) {\r\n      this.combo[index].progress = \"\";\r\n      this.combo[index].done = false;\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  /**\r\n   * Toggle the activation state of a combo with the given string and callback\r\n   * @method Qway#toggleCombo\r\n   * @param {string} combo\r\n   * @param {function} callback (optional)\r\n   * @param {boolean} state (optional) if you want to force true or false\r\n   * @returns {boolean} true if toggling went well or false otherwise\r\n   */\r\n  toggleCombo: function (combo, callback, state) {\r\n    combo = this.supervise(combo).join(\",\");\r\n\r\n    var index = this.combo.findIndex(\r\n      (a) =>\r\n        a.combo.join(\",\") === combo &&\r\n        (callback === undefined ||\r\n          (callback !== undefined &&\r\n            a.callback.toString() === callback.toString()))\r\n    );\r\n\r\n    if (index !== -1) {\r\n      if (typeof state === \"boolean\") {\r\n        this.combo[index].active = state;\r\n      } else {\r\n        this.combo[index].active = !this.combo[index].active;\r\n      }\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  /**\r\n   * Toggle the activation state of a shortcut with the given string and callback\r\n   * @method Qway#toggleCombo\r\n   * @param {string} combo\r\n   * @param {function} callback (optional)\r\n   * @param {boolean} state (optional) if you want to force true or false\r\n   * @returns {boolean} true if toggling went well or false otherwise\r\n   */\r\n  toggleShortcut: function (shortcut, callback, state) {\r\n    shortcut = this.supervise(shortcut).join(\"+\");\r\n\r\n    var index = this.shortcutslist.findIndex(\r\n      (a) =>\r\n        a.shortcut.join(\"+\") === shortcut &&\r\n        (callback === undefined ||\r\n          (callback !== undefined &&\r\n            callback.toString() === a.callback.toString()))\r\n    );\r\n\r\n    if (index !== -1) {\r\n      if (typeof state === \"boolean\") {\r\n        this.shortcutslist[index].active = state;\r\n      } else {\r\n        this.shortcutslist[index].active = !this.shortcutslist[index].active;\r\n      }\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  /**\r\n   * Replace the shortcut of the given callback to new one\r\n   * @method Qway#replace\r\n   * @param {function} callback\r\n   * @param {string} shortcut\r\n   * @returns {boolean}  true if shortcut replaced successfully or false otherwise\r\n   */\r\n  replace: function (callback, shortcut) {\r\n    var index = this.shortcutslist.find(\r\n      (a) =>\r\n        a.callback !== undefined &&\r\n        a.callback.toString() === callback.toString()\r\n    );\r\n\r\n    if (index !== undefined) {\r\n      this.unbind(index.shortcut.join(\"+\"), index.callback);\r\n      return this.bind(shortcut, callback);\r\n    }\r\n    return false;\r\n  },\r\n  /**\r\n   * Interactivly getting the shortcut through the user clicks, this is usefull when\r\n   * designing the settings of your app, allowing the user to set up his own shortcut.\r\n   * @method Qway#getFromUser\r\n   * @param {number} shortcutLength the shortcut accepeted key count\r\n   * @param {function} callback\r\n   * @param {function} func1 this function will be excuted each time the user press or release\r\n   * a key while in creating the shortcut, it helps keep supervising the events!\r\n   */\r\n  getFromUser: function (shortcutLength, callback, func1) {\r\n    this.intercativeMode = true;\r\n    this.toBuild[1].push(shortcutLength, callback, func1);\r\n  },\r\n  /**\r\n   * Stop the interactive mode, getting the shortcut from the user\r\n   * @method Qway#stopGettingFromUser\r\n   */\r\n  stopGettingFromUser: function () {\r\n    this.intercativeMode = false;\r\n    this.toBuild = [[], []];\r\n  },\r\n  /**\r\n   * Invoked internally to cancel a shortcut\r\n   * @method Qway#handleKeyup\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  handleKeyup: function (e) {\r\n    var key = e.key.toLowerCase();\r\n    key = key === \" \" ? \"space\" : key.trim();\r\n    key = key === \"control\" ? \"ctrl\" : key;\r\n    this.keysuite[key] = false;\r\n\r\n    if (this.intercativeMode === false) {\r\n      if (this.shortcutslist.length !== 0) {\r\n        if (this.shortcutActivated === false) return;\r\n\r\n        this.shortcutslist.forEach((item) => {\r\n          if (item.shortcut.indexOf(key) !== -1) {\r\n            var start = item.shortcut.indexOf(key);\r\n\r\n            for (let i = start; i < item.shortcut.length; i++) {\r\n              item.progress[i] = false;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (this.holdingActions.length !== 0) {\r\n          this.holdingActions.forEach((item) => {\r\n            if (item.key === key && item.timeout !== null) {\r\n              clearTimeout(item.timeout);\r\n              item.timeout = null;\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (this.combo.length !== 0 && this.comboActivated === true) {\r\n        // this is a figure for the content of the combo arrau to help visualize\r\n        // what happenings\r\n        //var obj = {\r\n        //    progress : '',\r\n        //    combo : combo,\r\n        //    callback : callback,\r\n        //    timing : timing,\r\n        //    timeout : null,\r\n        //    active : true\r\n        //}\r\n\r\n        this.combo.forEach((item, j) => {\r\n          if (\r\n            item.combo.indexOf(key) !== -1 &&\r\n            !item.done &&\r\n            item.active === true\r\n          ) {\r\n            e.preventDefault();\r\n\r\n            // first we increase the progress by the new `key`\r\n            item.progress += key;\r\n\r\n            // we clear the old execution timeout\r\n            if (item.timeout !== null) {\r\n              clearTimeout(item.timeout);\r\n            }\r\n\r\n            if (item.progress === item.combo.join(\"\")) {\r\n              // means we get the right string\r\n              item.done = true;\r\n            }\r\n\r\n            // now we execute the function\r\n            item.callback(item);\r\n\r\n            if (!item.done) {\r\n              item.timeout = setTimeout(function () {\r\n                item.progress = \"\";\r\n                item.callback(item);\r\n              }, item.timing);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // the interactive mode\r\n\r\n      var index = this.toBuild[0].findIndex((a) => a === key);\r\n      if (index !== -1) {\r\n        e.preventDefault();\r\n        this.toBuild[0].splice(index, 1);\r\n        this.toBuild[1][2](this.toBuild[0]);\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * Invoked internally by the library while performing the shortcut\r\n   * @method Qway#handleKeydown\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  handleKeydown: function (e) {\r\n    var key = e.key.toLowerCase();\r\n    key = key === \" \" ? \"space\" : key.trim();\r\n    key = key === \"control\" ? \"ctrl\" : key;\r\n    this.keysuite[key] = true;\r\n\r\n    if (this.intercativeMode === false) {\r\n      if (this.shortcutslist.length !== 0 && this.shortcutActivated === true) {\r\n        this.shortcutslist.forEach((item) => {\r\n          if (item.active === false) return;\r\n\r\n          if (item.shortcut[0] === \"*\") {\r\n            e.preventDefault();\r\n            item.progress[0] = true;\r\n          } else if (\r\n            item.progress.indexOf(true) !== -1 &&\r\n            item.shortcut[item.progress.lastIndexOf(true) + 1] == \"*\"\r\n          ) {\r\n            e.preventDefault();\r\n            item.progress[item.progress.lastIndexOf(true) + 1] = true;\r\n          }\r\n\r\n          //otherwise\r\n          if (item.shortcut.indexOf(key) !== -1) {\r\n            e.preventDefault();\r\n            if (\r\n              item.progress[item.shortcut.indexOf(key) - 1] === true ||\r\n              item.progress[item.shortcut.indexOf(key) - 1] === undefined\r\n            ) {\r\n              item.progress[item.shortcut.indexOf(key)] = true;\r\n            }\r\n          }\r\n\r\n          if (item.progress[item.progress.length - 1] === true) {\r\n            e.preventDefault();\r\n            item.progress[item.progress.length - 1] = false;\r\n            item.callback();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (this.holdingActions.length !== 0 && this.shortcutActivated === true) {\r\n        for (let i = 0; i < this.holdingActions.length; i++) {\r\n          const element = this.holdingActions[i];\r\n\r\n          if (key === element.key && element.timeout === null) {\r\n            e.preventDefault();\r\n            this.holdingActions[i].timeout = setTimeout(\r\n              element.callback,\r\n              element.duration\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else if (this.intercativeMode === true) {\r\n      // first we check if key is already in the shortcut or not\r\n      var alreadyThere = this.toBuild[0].findIndex((a) => a === key);\r\n      if (alreadyThere === -1) {\r\n        e.preventDefault();\r\n        // now we need to handle creating the shortcut through the user clicks\r\n        this.toBuild[0].push(key);\r\n        this.toBuild[1][2](this.toBuild[0]);\r\n\r\n        if (this.toBuild[0].length === this.toBuild[1][0]) {\r\n          // means if shortcut length is enough\r\n          // then stop enlarging it and record it\r\n          this.intercativeMode = false;\r\n          this.toBuild[1][2](this.toBuild[0], true);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * Bind new short cut with a callback, mainly use comma seperated list of keys to create a combo or\r\n   * seperated with `+` sign for ordinary shortcut.\r\n   * @method Qway#bind\r\n   * @param {string} shortcut the shortcut to bind\r\n   * @param {function} callback the callback to be excuted when shortcut performed, if none was passed then a default callback will be assigned\r\n   * @param {number} timing optional parameter defined the minimum time between key presses\r\n   * so the shortcut is performed!(only for combos)\r\n   */\r\n  bind: function (shortcut = \"ctrl+q\", callback, timing = 500) {\r\n    //do the check\r\n    if (typeof shortcut !== \"string\") {\r\n      console.warn(\"Qway warn you:\\nthe given shortcut not string!\");\r\n      return;\r\n    }\r\n    callback = typeof callback !== \"function\" ? this.QEF : callback;\r\n    timing = typeof timing !== \"number\" ? 500 : timing;\r\n\r\n    //take apart the shortcut and anlyse it\r\n    if (this.KEYS.indexOf(shortcut) !== -1) {\r\n      // means the shortcut is constrained out of one single key\r\n      var obj = {\r\n        shortcut: [shortcut],\r\n        progress: [false],\r\n        callback: callback,\r\n        active: true,\r\n      };\r\n      var index = this.check(shortcut);\r\n      if (index === -1 || this.duplicates) {\r\n        this.shortcutslist.push(obj);\r\n        return true;\r\n      }\r\n      return false;\r\n    } else if (shortcut.indexOf(\"+\") !== -1) {\r\n      var shortcuti = this.supervise(shortcut);\r\n      if (shortcut !== false) {\r\n        var obj = {\r\n          shortcut: shortcuti,\r\n          progress: new Array(shortcuti.length).fill(\r\n            false,\r\n            0,\r\n            shortcuti.length\r\n          ),\r\n          callback: callback,\r\n          active: true,\r\n        };\r\n\r\n        var index = this.check(shortcuti.join(\"+\"));\r\n        if (index === -1 || this.duplicates) {\r\n          this.shortcutslist.push(obj);\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n      return false;\r\n    } else if (shortcut.indexOf(\",\") !== -1) {\r\n      var combo = this.supervise(shortcut);\r\n\r\n      if (combo !== false) {\r\n        var obj = {\r\n          progress: \"\",\r\n          combo: combo,\r\n          done: false,\r\n          callback: callback,\r\n          timing: timing,\r\n          timeout: null,\r\n          active: true,\r\n        };\r\n        var index = this.check(combo.join(\",\"));\r\n        if (index === -1 || this.duplicates) {\r\n          this.combo.push(obj);\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n      return false;\r\n    } else if (shortcut.indexOf(\"=>\") !== -1) {\r\n      var shortcuti = this.supervise(shortcut);\r\n\r\n      if (shortcut !== false) {\r\n        var obj = {\r\n          key: shortcuti[0],\r\n          duration: shortcuti[1],\r\n          callback: callback,\r\n          timeout: null,\r\n        };\r\n        var index = this.check(shortcut);\r\n        if (index === -1 || this.duplicates) {\r\n          this.holdingActions.push(obj);\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n      return false;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  /**\r\n   * Remove the shortcut associated to the given `callback`, do not pass any parameter to empty\r\n   * the whole system callback, shortcuts combo and also hold actions.\r\n   * more options :\r\n   *  - pass `,` as the shortcut and `all` as the callback(or undefined) to delete all the combo\r\n   *  - pass `+` as the shortcut and `all` as the callback(or undefined) to delete all the shortcuts\r\n   *  - pass `=>` as the shortcut and `all` as the callback(or undefined) to delete all the holding actions\r\n   *\r\n   * @method Qway#unbind\r\n   * @param {string} shortcut\r\n   * @param {function} callback\r\n   * @returns {boolean} true if shortcut successfully unbinded or false otherwise\r\n   */\r\n  unbind: function (shortcut, callback) {\r\n    if (shortcut === undefined) {\r\n      // passing undefined will empty the whole system\r\n      // all the defined shortcut holdingActions and combo\r\n      this.shortcutslist = [];\r\n      this.holdingActions = [];\r\n      this.combo = [];\r\n      return;\r\n    }\r\n\r\n    var findANDdeleted = false;\r\n    if (this.KEYS.indexOf(shortcut) !== -1) {\r\n      for (let i = this.shortcutslist.length - 1; i > -1; i--) {\r\n        const element = this.shortcutslist[i];\r\n\r\n        if (\r\n          ((callback !== undefined &&\r\n            element.callback.toString() === callback.toString()) ||\r\n            callback === undefined) &&\r\n          element.shortcut.join(\"\") === shortcut\r\n        ) {\r\n          this.shortcutslist.splice(i, 1);\r\n          findANDdeleted = true;\r\n        }\r\n      }\r\n    } else if (shortcut.indexOf(\"+\") !== -1) {\r\n      if (callback === \"all\" || (callback === undefined && shortcut === \"+\")) {\r\n        this.shortcutslist = [];\r\n        findANDdeleted = true;\r\n      } else {\r\n        shortcut = this.supervise(shortcut).join(\"+\");\r\n\r\n        for (let i = this.shortcutslist.length - 1; i > -1; i--) {\r\n          const element = this.shortcutslist[i];\r\n\r\n          if (\r\n            element.shortcut.join(\"+\") === shortcut &&\r\n            ((callback !== undefined &&\r\n              element.callback.toString() === callback.toString()) ||\r\n              callback === undefined)\r\n          ) {\r\n            this.shortcutslist.splice(i, 1);\r\n            findANDdeleted = true;\r\n          }\r\n        }\r\n      }\r\n    } else if (shortcut.indexOf(\",\") !== -1) {\r\n      if (callback === \"all\" || (callback === undefined && shortcut === \",\")) {\r\n        this.combo = [];\r\n        findANDdeleted = true;\r\n      } else {\r\n        shortcut = this.supervise(shortcut).join(\",\");\r\n\r\n        for (let i = this.combo.length - 1; i > -1; i--) {\r\n          const combo = this.combo[i];\r\n          if (\r\n            combo.combo.join(\",\") === shortcut &&\r\n            ((callback !== undefined &&\r\n              combo.callback.toString() === callback.toString()) ||\r\n              callback === undefined)\r\n          ) {\r\n            this.combo.splice(i, 1);\r\n            findANDdeleted = true;\r\n          }\r\n        }\r\n      }\r\n    } else if (shortcut.indexOf(\"=>\") !== -1) {\r\n      if (callback === \"all\" || (callback === undefined && shortcut === \"=>\")) {\r\n        this.holdingActions = [];\r\n        findANDdeleted = true;\r\n      } else {\r\n        shortcut = this.supervise(shortcut);\r\n\r\n        for (let i = this.holdingActions.length - 1; i > -1; i--) {\r\n          const action = this.holdingActions[i];\r\n\r\n          if (\r\n            action.key === shortcut[0] &&\r\n            action.duration === shortcut[1] &&\r\n            ((callback !== undefined &&\r\n              action.callback.toString() === callback.toString()) ||\r\n              callback === undefined)\r\n          ) {\r\n            this.holdingActions.splice(i, 1);\r\n            findANDdeleted = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return findANDdeleted;\r\n  },\r\n  /**\r\n   * Check whether shortcut/keysmap/holdAction already under use or not!\r\n   * @method Qway#check\r\n   * @param {string} shortcut\r\n   * @returns {number}\r\n   */\r\n  check: function (shortcut) {\r\n    if (shortcut.indexOf(\"+\") !== -1) {\r\n      return this.shortcutslist.findIndex(\r\n        (a) => a !== undefined && a.shortcut.join(\"+\") === shortcut\r\n      );\r\n    } else if (shortcut.indexOf(\",\") !== -1) {\r\n      return this.combo.findIndex(\r\n        (a) => a !== undefined && a.combo.join(\",\") === shortcut\r\n      );\r\n    } else if (shortcut.indexOf(\"=>\") !== -1) {\r\n      return this.holdingActions.findIndex(\r\n        (a) => a !== undefined && a.key === shortcut\r\n      );\r\n    } else {\r\n      return this.shortcutslist.findIndex(\r\n        (a) => a !== undefined && a.shortcut[0] === shortcut\r\n      );\r\n    }\r\n  },\r\n  /**\r\n   * Does check a shortcut whether is proper form and can be used or, a proper form shortcut\r\n   * contains only existing system keys, and only one type of seperator so it's type can be identified\r\n   * which could be:\r\n   *  - `shortcut` : if the keys seperator is `+` sign\r\n   *  - `combo` : if the keys seperator is `,`  comma\r\n   *  - `holdAction` : if the keys seperator is `=>` sign\r\n   *\r\n   * also the function does fix the shortcut in some parts!\r\n   * you don't usually invoke this function as it's used internally.\r\n   * @method Qway#supervise\r\n   * @param {string} shortcut\r\n   * @returns {Array} if shortcut fit the terms then it returned in an array otherwise\r\n   * false is returned!\r\n   */\r\n  supervise: function (shortcut) {\r\n    if (\r\n      shortcut.indexOf(\",\") !== -1 &&\r\n      (shortcut.indexOf(\"+\") !== -1 || shortcut.indexOf(\"=>\") !== -1)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      shortcut.indexOf(\"+\") !== -1 &&\r\n      (shortcut.indexOf(\",\") !== -1 || shortcut.indexOf(\"=>\") !== -1)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      shortcut.indexOf(\"=>\") !== -1 &&\r\n      (shortcut.indexOf(\"+\") !== -1 || shortcut.indexOf(\",\") !== -1)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    var error = false;\r\n\r\n    if (shortcut.indexOf(\"+\") !== -1) {\r\n      shortcut = shortcut.split(\"+\");\r\n      for (let i = 0; i < shortcut.length; i++) {\r\n        if (shortcut[i] === \"control\") {\r\n          shortcut[i] = \"ctrl\";\r\n        }\r\n\r\n        if (shortcut[i] === \" \") {\r\n          shortcut[i] = \"space\";\r\n        }\r\n\r\n        shortcut[i] = shortcut[i].toLowerCase();\r\n\r\n        if (this.KEYS.indexOf(shortcut[i]) === -1) {\r\n          error = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return error ? false : shortcut;\r\n    } else if (shortcut.indexOf(\",\") !== -1) {\r\n      shortcut = shortcut.split(\",\");\r\n      var res = [];\r\n      for (let i = 0; i < shortcut.length; i++) {\r\n        var key;\r\n\r\n        key = shortcut[i] === \" \" ? \"space\" : shortcut[i].trim().toLowerCase();\r\n        key = key === \"control\" ? \"ctrl\" : key;\r\n\r\n        if (key.indexOf(\"*\") !== -1) {\r\n          key = key.split(\"*\");\r\n          times = parseFloat(key[1]);\r\n          name = key[0].trim();\r\n\r\n          if (this.KEYS.indexOf(name) === -1) {\r\n            error = true;\r\n            break;\r\n          }\r\n\r\n          for (let j = 0; j < times; j++) {\r\n            res.push(name);\r\n          }\r\n        } else {\r\n          res.push(key);\r\n          if (this.KEYS.indexOf(key) === -1) {\r\n            error = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return error ? false : res;\r\n    } else if (shortcut.indexOf(\"=>\") !== -1) {\r\n      shortcut = shortcut.split(\"=>\");\r\n      var duration = parseFloat(shortcut[1]);\r\n      var key = shortcut[0];\r\n\r\n      key = key === \" \" ? \"space\" : key.trim().toLowerCase();\r\n      key = key === \"control\" ? \"ctrl\" : key;\r\n\r\n      if (this.KEYS.indexOf(key) === -1) {\r\n        return false;\r\n      }\r\n\r\n      return this.KEYS.indexOf(key) === -1 ? false : [key, duration];\r\n    } else {\r\n      shortcut = shortcut === \" \" ? \"space\" : shortcut.trim().toLowerCase();\r\n      shortcut = shortcut === \"control\" ? \"ctrl\" : shortcut;\r\n\r\n      return this.KEYS.indexOf(shortcut) === -1\r\n        ? false\r\n        : {\r\n            shortcut: shortcut,\r\n            callback: null,\r\n          };\r\n    }\r\n  },\r\n  /**\r\n   * Returns an object that can be easily saved inside a JSON file, this helps saving\r\n   * the user preferences if you are creating an app!\r\n   *\r\n   * also the function `initiate` suppose to take as parameter the return of this function\r\n   * as to load back the state.\r\n   * @method Qway#pack\r\n   * @returns {object}\r\n   */\r\n  pack: function () {\r\n    return {\r\n      duplicates: this.duplicates,\r\n      shortcut: this.shortcutslist,\r\n      holdingActions: this.holdingActions,\r\n      shortcutActivated: this.shortcutActivated,\r\n      comboActivated: this.comboActivated,\r\n      combo: this.combo,\r\n    };\r\n  },\r\n  /**\r\n   * Load the shortcut list and the combo and all preferences from an object, usually this\r\n   * object is parsed from a JSON file, as to save and load back the state.\r\n   * @method Qway#initiate\r\n   * @param {object} obj\r\n   */\r\n  initiate: function (obj) {\r\n    this.duplicates = obj.duplicates || false;\r\n    this.shortcutslist = obj.shortcut || [];\r\n    this.combo = obj.combo || [];\r\n    this.holdingActions = obj.holdingActions || [];\r\n    this.comboActivated = obj.comboActivated || true;\r\n    this.shortcutActivated = obj.shortcutActivated || true;\r\n  },\r\n  /**\r\n   * Used to handle window blur event, invoked internally by the system\r\n   * @method Qway#blur\r\n   */\r\n  blur: function () {\r\n    for (let i = 0; i < this.shortcutslist.length; i++) {\r\n      this.shortcutslist[i].progress.fill(\r\n        false,\r\n        0,\r\n        this.shortcutslist[i].progress.length\r\n      );\r\n    }\r\n    for (let i = 0; i < this.combo.length; i++) {\r\n      this.combo[i].progress = \"\";\r\n    }\r\n    for (let i = 0; i < this.holdingActions.length; i++) {\r\n      if (this.holdingActions[i].timeout !== null) {\r\n        clearTimeout(this.holdingActions[i].timeout);\r\n        this.holdingActions[i].timeout = null;\r\n      }\r\n    }\r\n\r\n    this.intercativeMode = false;\r\n    this.toBuild = [[], []];\r\n  },\r\n};\r\n\r\nexport default Qway;\r\n"],"names":["Qway","duplicates","_this","this","shortcutslist","combo","holdingActions","KEYS","shortcutActivated","comboActivated","intercativeMode","toBuild","QEF","keysuite","window","addEventListener","e","handleKeydown","call","handleKeyup","blur","undefined","findIndex","Array","prototype","callback","res","i","length","element","out","approve","shortcut","join","bind","approveToReplace","obj","find","a","toString","exist","check","unbind","abort","resetCombo","supervise","index","progress","done","toggleCombo","state","active","toggleShortcut","replace","getFromUser","shortcutLength","func1","push","stopGettingFromUser","key","toLowerCase","trim","forEach","item","indexOf","timeout","clearTimeout","j","preventDefault","setTimeout","timing","splice","lastIndexOf","duration","shortcuti","fill","console","warn","findANDdeleted","action","error","split","times","parseFloat","name","pack","initiate"],"mappings":"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"}